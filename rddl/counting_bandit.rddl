
domain conditional_bandit {
  
	requirements = { 
		//reward-deterministic // this domain does not use a stochastic reward
		partially-observed
	};
	
	types {
  		button : object;
		machine : object;
	};
      
	pvariables { 
    		  		    		  		
		CONNECTED(button, machine) : { non-fluent, bool, default = false };
		PAYOUT(machine) : { non-fluent, real, default = 0.0 };
		BLINK_COUNT : { non-fluent, int, default = 3 };
		LIGHT_PROB(machine) : { non-fluent, real, default = 1.0 };

		//COLORED(button) : { non-fluent, bool, default = true};

		press(button) : { action-fluent, bool, default = false}; 

		light(machine) : { state-fluent, bool, default=false};

		light_observed(machine) : { observ-fluent, bool};
	
		activated(machine) : { interm-fluent, bool};

		enough_light(machine) : { state-fluent, bool, default=false};

		light_count(machine) : { state-fluent, int, default=0};

	};
	
	cpfs {
		
		//intermediate fluents
		activated(?m) = exists_{?b : button} [press(?b) & CONNECTED(?b, ?m)];
		
		enough_light'(?m) = if (light_count'(?m) >= BLINK_COUNT) then true else false;

		//state fluents
		light'(?m) = if (light(?m)) then false else Bernoulli(LIGHT_PROB(?m));

		light_count'(?m) = if (light'(?m)) then [if (enough_light(?m)) then 1 else light_count(?m) + 1] else [if (enough_light(?m)) then 0 else light_count(?m)];

		light_observed(?m) = light'(?m);
	
	};
	
	// give reward 
	reward = [sum_{?m : machine} [if (activated(?m) * light(?m) * enough_light(?m) > 0) then PAYOUT(?m) else [if (activated(?m)) then -1 else 0]]];
}